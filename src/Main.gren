module Main exposing (main)

import Ansi
import Date exposing (Date)
import Init
import Node
import Tui


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { tasks : Array Task
    }


type alias Task =
    { priority : Int
    , due : Date
    , scheduled : Date
    , available : Date
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = { tasks = [] }
        , command = Cmd.none
        }


type Msg
    = GotInput Tui.Input


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotInput input ->
            { model = model
            , command = 
                case input of
                    Tui.KeyChar "q" -> Node.exit
                    _ -> Cmd.none
            }


view : Model -> String
view model =
    String.join ""
        [ "Next: parse files in model.tasks\n"
        , Ansi.wrapColor Ansi.Yellow "Press q to quit."
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none
