module Main exposing (main)

import Ansi
import Date exposing (Date)
import Dict
import Init
import Node
import Stream exposing (Stream)
import Task
import Tui


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { tasks : Array Taskfile
    , home : String
    , stdout : Stream
    , stderr : Stream
    }


type alias Taskfile =
    { priority : Int
    , due : Date
    , scheduled : Date
    , available : Date
    }


homeVar : String
homeVar = "TASKFILES_HOME"


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = 
            { tasks = []
            , home = "."
            , stdout = env.stdout
            , stderr = env.stderr
            }
        , command = 
            Cmd.none
            -- TODO: the problem is here!
            -- Node.getEnvironmentVariables
            --     |> Task.map (Dict.get homeVar)
            --     |> Task.perform GotHomeVar
        }


type Msg
    = GotInput Tui.Input
    | GotHomeVar (Maybe String)


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotInput input ->
            { model = model
            , command = 
                case input of
                    Tui.KeyChar "q" -> Node.exit |> Task.execute
                    _ -> Cmd.none
            }


        GotHomeVar var ->
            case var of
                Just home ->
                    { model = { model | home = home }
                    , command = Cmd.none
                    }

                Nothing ->
                    { model = model
                    , command =
                        Stream.sendLine model.stderr (homeVar ++ " must be set")
                            |> Task.andThen (\_ -> Node.exitWithCode 1)
                            |> Task.execute
                    }


view : Model -> String
view model =
    "Hello"
    -- String.join "\n"
    --     [ homeVar ++ ": " ++ model.home
    --     , "Next: parse files in model.tasks"
    --     , Ansi.wrapColor Ansi.Yellow "Press q to quit."
    --     ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none
